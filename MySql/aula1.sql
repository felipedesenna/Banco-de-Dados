/* Modelagem basica */

CLIENTE

NOME CARACTER(30)
CPF NUMERICO(11)
EMAIL CARACTER(30)
TELEFONE CARACTER(30)
SEXO CARACTER(1)
ENDERECO CARACTER(100)

/*PROCESSOS DE MODELAGEM*/

/*ADM DE DADOS*/
MODELAGEM CONCEITUAL - RASCUNHO
MODELAGEM LOGICA - PROGRAMAS BRMODELO

/*AD - DBA*/
MODELAGEM FISICA - SCRIPT DO BANCO

/*MODELO FISICO*/

/*CRIANDO UM BANCO*/
CREATE DATABASE PROJETO;

/*CONECTANDO*/
USE PROJETO;

/*CRIANDO A TABELA*/
CREATE TABLE CLIENTE(
    NOME VARCHAR(30),
    SEXO CHAR(1),
    EMAIL VARCHAR(30),
    CPF INT(11),
    TELEFONE VARCHAR(30),
    ENDERECO VARCHAR(100)
);

/*VERIFICANDO AS TABELAS*/
SHOW TABLES;

/*DESCREVENDO TABELAS*/
DESC CLIENTE;

/*FORMA 01 - EXCLUINDO AS COLUNAS*/
INSERT INTO CLIENTE VALUES('JOAO','M','JOAO@GMAIL.COM',988638273,'22923110','MAIA LACERDA - ESTACIO - RIO DE JANEIRO - RJ');
INSERT INTO CLIENTE VALUES('CELIA','F','CELIA@GMAIL.COM',541521456,'25078869','RIACHUELO - CENTRO - RIO DE JANEIRO - RJ');
INSERT INTO CLIENTE VALUES('JORGE','M',NULL,885755896,'58748895','OSCAR CURY - BOM RETIRO - PATOS DE MINAS - MG');

/*FORMA 02 - COLOCANDO AS COLUNAS*/
INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('LILIAN','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','947785696',887774856);

/*FORMA 03 - INSERT COMPACTO - SOMENTE MYSQL*/
INSERT INTO CLIENTE VALUES('ANA','F','ANA@GMAIL.COM',85548962,'548556985','PRES ANTONIO CARLOS - CENTRO - SAO PAULO - SP'),
                          ('CARLA','F','CARLA@GMAIL.COM',7745828,'66587458','SAMUEL SILVA - CENTRO - BELO HORIZONTE - MG');
                          
/*O COMANDO SELECT*/
SELECT NOW();
SELECT 'FELIPE SENNA';
SELECT 'BANCO DE DADOS';
SELECT NOME, SEXO, EMAIL FROM CLIENTE;
SELECT NOME, SEXO, EMAIL, ENDERECO FROM CLIENTE;
SELECT ENDERECO, SEXO, EMAIL FROM CLIENTE;

/*ALIAS DE COLUNAS*/
SELECT 'FELIPE SENNA' AS PROFESSOR;

/*FINS ACADEMICOS*/
SELECT * FROM CLIENTE;

/*FILTRANDO DADOS COM WHERE E LIKE*/
SELECT NOME, TELEFONE FROM CLIENTE;

/*FILTRANDO*/
SELECT NOME, SEXO FROM CLIENTE
WHERE SEXO = 'M';

SELECT NOME, SEXO FROM CLIENTE
WHERE SEXO = 'F';

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO = 'RJ';

/*UTILIZANDO O LIKE*/
SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO LIKE 'RJ';

/*CARACTER CORINGA %*/
SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO LIKE '%CENTRO%';

/*OPERADORES LOGICOS*/
/*OR - OU*/
SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE
SEXO = 'M' OR ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE
SEXO = 'F' OR ENDERECO LIKE '%ESTACIO';

/*AND - E*/
SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE
SEXO = 'M' AND ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE
SEXO = 'F' AND ENDERECO LIKE '%ESTACIO';

/*COUNT(*), GROUP BY, PERFORMANCE COM OPERADORES LOGICOS*/
/*CONTANDO OS REGISTROS DE UMA TABELA*/
SELECT COUNT(*) FROM CLIENTE;
SELECT COUNT(*) AS "QUANTIDADE" FROM CLIENTE;

/*OPERADOR GROUP BY*/
SELECT SEXO, COUNT(*) AS "QUANTIDADE"
FROM CLIENTE
GROUP BY SEXO;

/*PERFORMANCE EM OPERADORES LOGICOS*/
/*1 MILHAO DE REGISTROS

PARA CONTAR
SELECT COUNT(*) FROM CLIENTE;

SELECT SEXO, COUNT(*) FROM CLIENTE
GROUP BY SEXO;

SELECT CIDADE, COUNT(*) FROM CLIENTE
GROUP BY CIDADE;

CONDICAO
SEXO = F
CIDADE = RIO DE JANEIRO

SITUACAO - TRATANDO COM OU/OR
70% MULHERES = SEXO = F
30% MORA NO RIO DE JANEIRO

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE SEXO = 'F'
OR CIDADE = 'RIO DE JANEIRO';

SITUACAO - TRATANDO COM E/AND
70% MULHERES = SEXO = F
30% MORA NO RIO DE JANEIRO

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE CIDADE = 'RIO DE JANEIRO'
AND SEXO = 'F';
*/

/*FILTRANDO VALORES NULOS*/
SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE EMAIL IS NULL;

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE EMAIL IS NOT NULL;

/*UTILIZANDO O UPDATE PARA ATUALIZAR VALORES*/
SELECT NOME, EMAIL
FROM CLIENTE;

UPDATE CLIENTE
SET EMAIL = 'LILIAN@HOTMAIL.COM';

/*UTILIZAR O UPDATE SEMPRE ACOMPANHADO DA CLAUSULA WHERE*/
UPDATE CLIENTE
SET EMAIL = 'LILIAN@HOTMAIL.COM'
WHERE NOME = 'LILIAN';

UPDATE CLIENTE
SET EMAIL = 'JORGE@HOTMAIL.COM'
WHERE NOME = 'JORGE';

/*DELETANDO REGISTROS COM A CLAUSULA DELETE*/
DELETE FROM CLIENTE; -- NÃO USAR

SELECT COUNT(*) FROM CLIENTE;

DELETE FROM CLIENTE
WHERE NOME = 'ANA';

SELECT COUNT(*) FROM CLIENTE;

/*ENTRANDO COM MAIS TELEFONES*/
UPDATE CLIENTE
SET TELEFONE = '97865434'
WHERE NOME = 'JOAO';

UPDATE CLIENTE
SET TELEFONE = '22923110 - 97865434'
WHERE NOME = 'JOAO';

SELECT ENDERECO, COUNT(*) AS "QUANTIDADE"
FROM CLIENTE
GROUP BY ENDERECO;

/*1a FORMA NORMAL*/
/*1- TODO CAMPO VETORIZADO SE TORNARA OUTRA TABELA
2- TODO CAMPO MULTIVALORADO SE TORNARA OUTRA TABELA
3- TODA TABELA NECESSITA DE PELO MENOS UM CAMPO QUE INDENTIFIQUE TODO O REGISTRO COMO SENDO ÚNICO*/

/*CARDINALIDADE*/
/*QUEM DEFINE A CARDINALIDADE É A REGRA DE NEGOCIOS*/
/*PRIMEIRO ALGARISMO - OBRIGATORIEDADE
0 - NAO OBRIGATORIO
1 - OBRIGATORIO

SEGUNDO ALGARISMO - CARDINALIDADE
1 - MAXIMO DE UM
N - MAIS DE UM*/

/*MODELAGEM DE CLIENTE*/
CREATE DATABASE COMERCIO;

USE COMERCIO;

CREATE TABLE CLIENTE(
    IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30) NOT NULL,
    SEXO ENUM('M','F') NOT NULL,
    EMAIL VARCHAR(50) UNIQUE,
    CPF VARCHAR(15) UNIQUE
);

CREATE TABLE TELEFONE(
    IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
    TIPO ENUM('COMERCIAL','RESIDENCIAL','CELULAR'),
    NUMERO VARCHAR(10),
    ID_CLIENTE INT,
    FOREIGN KEY(ID_CLIENTE)
    REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE ENDERECO(
    IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
    RUA VARCHAR(30) NOT NULL,
    BAIRRO VARCHAR(30) NOT NULL,
    CIDADE VARCHAR(30) NOT NULL,
    ESTADO CHAR(2) NOT NULL,
    ID_CLIENTE INT UNIQUE,
    FOREIGN KEY(ID_CLIENTE)
    REFERENCES CLIENTE(IDCLIENTE)
);

/*FOREIGN KEY - CHAVE ESTRANGEIRA*/
/*É A CHAVE PRIMARIA DE UMA TABELA, QUE VAI ATE OUTRA TABELA FAZER A REFERENCIA*/
/*EM RELACIONAMENTOS 1 X 1 A CHAVE ESTRANGEIRA FICA NA TABELA MAIS FRACA*/
/*EM RELACIONAMENTOS 1 X N A CHAVE ESTRANGEIRA FICARA SEMPRE NA TABELA N*/

INSERT INTO CLIENTE VALUES(NULL,'JOAO','M','JOAO@GMAIL.COM','98547-6');
INSERT INTO CLIENTE VALUES(NULL,'CARLOS','M','CARLOS@GMAIL.COM','86664-7');
INSERT INTO CLIENTE VALUES(NULL,'ANA','F','ANA@GMAIL.COM','75658-5');
INSERT INTO CLIENTE VALUES(NULL,'JORGE','M','JORGE@GLOBO.COM','88657-5');
INSERT INTO CLIENTE VALUES(NULL,'CLARA','F',NULL,'99754-7');
INSERT INTO CLIENTE VALUES(NULL,'CELIA','F','CELIA@IG.COM','77558-5');

SELECT * FROM CLIENTE;

/*INSERINDO UM REGISTRO ERRADO*/
INSERT INTO CLIENTE VALUES(NULL,'ANTONIO','M','JOAO@GMAIL.COM');

/*CORRIGINDO*/
INSERT INTO CLIENTE VALUES(NULL,'ANTONIO','M',NULL,'78558-6');
INSERT INTO CLIENTE VALUES(NULL,'JOAO','M',NULL,'86695-6');

/*ENDERECO*/
INSERT INTO ENDERECO VALUES(NULL,'RUA A','CENTRO','B. HORIZONTE','MG',4);
INSERT INTO ENDERECO VALUES(NULL,'RUA B','CENTRO','RIO DE JANEIRO','RJ',1);
INSERT INTO ENDERECO VALUES(NULL,'RUA C','JARDINS','SAO PAULO','SP',3);
INSERT INTO ENDERECO VALUES(NULL,'RUA D','CENTRO','FORTALEZA','CE',8);
INSERT INTO ENDERECO VALUES(NULL,'RUA E','ESTACIO','RIO DE JANEIRO','RJ',2);
INSERT INTO ENDERECO VALUES(NULL,'RUA F','CRUZEIRO','B. HORIZONTE','MG',7);
INSERT INTO ENDERECO VALUES(NULL,'RUA Y','JD. CALIFORNIA','BARRETOS','SP',5);
INSERT INTO ENDERECO VALUES(NULL,'RUA Z','CENTRO','BARRETOS','SP',6);

SELECT * FROM ENDERECO;

/*TELEFONE*/
INSERT INTO TELEFONE VALUES(NULL,'CELULAR','9955331',1);
INSERT INTO TELEFONE VALUES(NULL,'RESIDENCIAL','12412412',3);
INSERT INTO TELEFONE VALUES(NULL,'COMERCIAL','3463463',2);
INSERT INTO TELEFONE VALUES(NULL,'RESIDENCIAL','321312312',7);
INSERT INTO TELEFONE VALUES(NULL,'COMERCIAL','967967967',1);
INSERT INTO TELEFONE VALUES(NULL,'CELULAR','5547474',6);
INSERT INTO TELEFONE VALUES(NULL,'CELULAR','4325235',2);
INSERT INTO TELEFONE VALUES(NULL,'COMERCIAL','412414',7);
INSERT INTO TELEFONE VALUES(NULL,'RESIDENCIAL','5475474',7);
INSERT INTO TELEFONE VALUES(NULL,'CELULAR','53453453',3);
INSERT INTO TELEFONE VALUES(NULL,'RESIDENCIAL','7878658',6);
INSERT INTO TELEFONE VALUES(NULL,'COMERCIAL','52365856',6);

SELECT * FROM TELEFONE;

/*SELECAO, PROJECAO E JUNCAO*/
/*PROJECAO - TUDO QUE QUEREMOS PROJETAR NA TELA*/
SELECT NOW() AS "DATA";

SELECT NOME, NOW() AS "DATA" /*PROJECAO*/
FROM CLIENTE;

/*SELECAO - TEORIA DOS CONJUNTOS - WHERER É A CLAUSULA DE SELECAO*/
SELECT NOME, SEXO
FROM CLIENTE;

SELECT NOME, SEXO
FROM CLIENTE
WHERE SEXO = 'M'; /*SELECAO*/

UPDATE CLIENTE
SET SEXO = 'F'
WHERE IDCLIENTE = 5; /*SELECAO*/

/*JUNCAO*/
/*NOME, SEXO, BAIRRO, CIDADE, DATA*/
SELECT NOME, SEXO, BAIRRO, CIDADE, NOW() AS "DATA"
FROM CLIENTE, ENDERECO
WHERE IDCLIENTE = ID_CLIENTE; /*SELECAO*/

SELECT NOME, SEXO, BAIRRO, CIDADE, NOW() AS "DATA"
FROM CLIENTE, ENDERECO
WHERE IDCLIENTE = ID_CLIENTE
AND BAIRRO = 'CENTRO';

/*JOIN - JUNCAO*/
SELECT NOME, SEXO, BAIRRO, CIDADE /*PROJECAO*/
FROM CLIENTE
INNER JOIN ENDERECO /*JUNCAO*/
ON IDCLIENTE = ID_CLIENTE
WHERE BAIRRO = 'CENTRO'; /*SELECAO*/

SELECT CLIENTE.NOME, CLIENTE.SEXO, ENDERECO.BAIRRO, ENDERECO.CIDADE, TELEFONE.TIPO, TELEFONE.NUMERO
FROM CLIENTE
INNER JOIN ENDERECO
ON CLIENTE.IDCLIENTE = ENDERECO.ID_CLIENTE
INNER JOIN TELEFONE
ON CLIENTE.IDCLIENTE = TELEFONE.ID_CLIENTE;

SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'M';

/*QUERIES*/
/*PARA UMA CAMPANHA DE MARKETING, O SETOR COLICITOU UM
RELATÓRIO COM O NOME, EMAIL, E TELEFONE CELULAR DOS
CLIENTES QUE MORAM NO ESTADO DO RIO DE JANEIRO VOCÊ TERÁ
QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA O PROGRAMADOR*/

SELECT C.NOME, C.EMAIL, T.NUMERO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE TIPO = 'CELULAR' AND ESTADO = 'RJ';

+--------+------------------+---------+
| NOME   | EMAIL            | NUMERO  |
+--------+------------------+---------+
| JOAO   | JOAO@GMAIL.COM   | 9955331 |
| CARLOS | CARLOS@GMAIL.COM | 4325235 |
+--------+------------------+---------+

/*PARA UMA CAMPANHA DE PRODUTOS DE BELEZA, O COMERCIAL
SOLICITOU UM RELATÓRIO COM O NOME, EMAIL E TELEFONE CELULAR
DAS MULHERES QUE MORAM NO ESTADO DE SÃO PAULO, VOCÊ TERÁ
QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA O PROGRAMADOR*/

SELECT C.NOME, C.EMAIL, T.NUMERO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE SEXO = 'F' AND TIPO = 'CELULAR' AND ESTADO = 'SP';

+-------+---------------+----------+
| NOME  | EMAIL         | NUMERO   |
+-------+---------------+----------+
| ANA   | ANA@GMAIL.COM | 53453453 |
| CELIA | CELIA@IG.COM  | 5547474  |
+-------+---------------+----------+

/*IFNULL*/
SELECT C.NOME AS "CLIENTE", IFNULL(C.EMAIL,'SEM EMAIL') AS "EMAIL", T.NUMERO AS "TELEFONE"
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE TIPO = 'RESIDENCIAL' AND ESTADO = 'MG';

+---------+-----------+-----------+
| NOME    | EMAIL     | NUMERO    |
+---------+-----------+-----------+
| ANTONIO | SEM EMAIL | 321312312 |
| ANTONIO | SEM EMAIL | 5475474   |
+---------+-----------+-----------+

/*VIEWS OU VISOES*/
SELECT C.NOME, C.SEXO, IFNULL(C.EMAIL,'SEM EMAIL') AS "EMAIL", T.TIPO, T.NUMERO, E.BAIRRO, E.CIDADE, E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE;

/*CRIANDO A VIEW*/
CREATE VIEW RELATORIO AS
SELECT C.NOME, C.SEXO, IFNULL(C.EMAIL,'SEM EMAIL') AS "EMAIL", T.TIPO, T.NUMERO, E.BAIRRO, E.CIDADE, E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE;

SELECT * FROM RELATORIO;

SELECT * FROM RELATORIO
WHERE SEXO = 'F';

/*APAGANDO UMA VIEW*/
DROP VIEW RELATORIO;

CREATE VIEW V_RELATORIO AS
SELECT C.NOME, C.SEXO, IFNULL(C.EMAIL,'SEM EMAIL') AS "EMAIL", T.TIPO, T.NUMERO, E.BAIRRO, E.CIDADE, E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE;

/*ORDER BY*/
SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
ORDER BY NOME;

SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
ORDER BY NOME, CPF ASC;

SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
ORDER BY 4;

/*DELIMITADOR E ESTADO DO SERVIDOR*/
DELIMITER $

SELECT * FROM V_RELATORIO$

STATUS

/*PROCEDURES*/

/*1- ETAPA CRIAR DELIMITER*/
DELIMITER $

CREATE PROCEDURE NOME()
BEGIN
    ACAO;
END
$

CREATE PROCEDURE CONTA()
BEGIN
    SELECT 10 + 10 AS "CONTA";
END
$

/*CHMANDO A PROCEDURE*/
CALL CONTA()$

/*PROCEDURES COM PARAMENTROS*/
DROP PROCEDURE CONTA;

CREATE PROCEDURE CONTA(NUMERO1 INT, NUMERO2 INT)
BEGIN
    SELECT NUMERO1 + NUMERO2 AS "CONTA";
END
$

CALL CONTA(100,78);

/*PROCEDURES COM TABELAS*/
CREATE TABLE CURSOS(
    IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30) NOT NULL,
    HORAS INT(3) NOT NULL,
    VALOR FLOAT(10,2) NOT NULL
);

INSERT INTO CURSOS VALUES(NULL,'BANCO DE DADOS FUNDAMENTAL',25,200.00);

SELECT * FROM CURSOS;

/*PROCEDURE DE CADASTRO*/
CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30),P_HORAS INT(3),P_PRECO FLOAT(10,2))
BEGIN
    INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO);
END
$

CALL CAD_CURSO('BI SQL SERVER',35,200.00);

/*PROCEDURE DE LEITURA*/
CREATE PROCEDURE SEL_CURSO()
BEGIN
    SELECT IDCURSO, NOME, HORAS, VALOR
    FROM CURSOS;
END
$

CALL SEL_CURSO();

/*FUNCOES DE AGREGACAO NUMERICAS*/
CREATE TABLE VENDEDORES(
    IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    SEXO CHAR(1),
    JANEIRO FLOAT(10,2),
    FEVEREIRO FLOAT(10,2),
    MARCO FLOAT(10,2)
);

INSERT INTO VENDEDORES VALUES(NULL,'CARLOS','M',789.44,866.47,68585.58);
INSERT INTO VENDEDORES VALUES(NULL,'MARIA','F',213.44,545.47,34234.58);
INSERT INTO VENDEDORES VALUES(NULL,'ANTONIO','M',345.44,4545.907987,654.58);
INSERT INTO VENDEDORES VALUES(NULL,'CLARA','F',678.44,88.47,32423.58);
INSERT INTO VENDEDORES VALUES(NULL,'ANDERSON','M',537.44,47.47,909098.58);
INSERT INTO VENDEDORES VALUES(NULL,'IVONE','F',643.44,23423.47,534534.58);
INSERT INTO VENDEDORES VALUES(NULL,'JOAO','M',235.44,3424.47,12432.58);
INSERT INTO VENDEDORES VALUES(NULL,'CELIA','F',997.44,212.47,324235.58);

/*MAX - TRAZ O VALOR MAXIMO DE UMA COLUNA*/
SELECT MAX(FEVEREIRO) AS MAIOR_FEV
FROM VENDEDORES;

/*MIN - TRAZ O VALOR MINIMO DE UMA COLUNA*/
SELECT MIN(FEVEREIRO) AS MENOR_FEV
FROM VENDEDORES;

/*AVG - TRAZ O VALOR MEDIO DE UMA COLUNA*/
SELECT AVG(FEVEREIRO) AS MEDIA_FEV
FROM VENDEDORES;

/*VARIAS FUNCOES*/
SELECT MAX(JANEIRO) AS MAX_JAN,
MIN(JANEIRO) AS MIN_JAN,
AVG(JANEIRO) AS MEDIA_JAN
FROM VENDEDORES;

/*TRUNCATE*/
SELECT MAX(JANEIRO) AS MAX_JAN,
MIN(JANEIRO) AS MIN_JAN,
TRUNCATE(AVG(JANEIRO),2) AS MEDIA_JAN
FROM VENDEDORES;

/*AGREGANDO COM SUM()*/
SELECT SUM(JANEIRO) AS TOTAL_JAN
FROM VENDEDORES;

SELECT SUM(JANEIRO) AS TOTAL_JAN,
SUM(FEVEREIRO) AS TOTAL_FEV,
SUM(MARCO) AS TOTAL_MAR
FROM VENDEDORES;

/*VENDAS POR SEXO*/
SELECT SEXO, SUM(MARCO) AS TOTAL_MARCO
FROM VENDEDORES
GROUP BY SEXO;

/*SUBQUERIES*/
/*VENDEDOR QUE VENDEU MENOS EM MARCO E O SEU NOME*/
SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES);

/*NOME E VALOR QUE VENDEU MAIS EM MARCO*/
SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MAX(MARCO) FROM VENDEDORES);

/*QUEM VENDEU MAIS QUE O VALOR MEDIO DE FEV*/
SELECT NOME, FEVEREIRO FROM VENDEDORES
WHERE FEVEREIRO > (SELECT AVG(FEVEREIRO) FROM VENDEDORES);

SELECT NOME, FEVEREIRO FROM VENDEDORES
WHERE FEVEREIRO < (SELECT AVG(FEVEREIRO) FROM VENDEDORES);

/*OPERACOES EM LINHA*/
SELECT NOME, JANEIRO, FEVEREIRO, MARCO,
(JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS "MEDIA"
FROM VENDEDORES;

/*APLICANDO UMA %*/
SELECT NOME, JANEIRO, FEVEREIRO, MARCO,
(JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
(JANEIRO+FEVEREIRO+MARCO) * .25 AS "DESCONTO",
TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS "MEDIA"
FROM VENDEDORES;

/*ALTERANDO TABELAS*/
CREATE TABLE TABELA(
    COLUNA1 VARCHAR(30),
    COLUNA2 VARCHAR(30),
    COLUNA3 VARCHAR(30)
);

/*ADICIONANDO UMA PK*/
ALTER TABLE TABELA
ADD PRIMARY KEY (COLUNA1);

/*ADICIONANDO COLUNA SEM POSICA. ULTIMA POSICAO*/
ALTER TABLE TABELA
ADD COLUNA VARCHAR(30);

/*ADICIONANDO UMA COLUNA COM POSICAO*/
ALTER TABLE TABELA
ADD COLUMN COLUNA4 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA3;

/*MODIFICANDO O TIPO DE UM CAMPO*/
ALTER TABLE TABELA MODIFY COLUNA2 DATE NOT NULL;

/*RENOMEANDO O NOME DA TABELA*/
ALTER TABLE TABELA
RENAME PESSOA;

CREATE TABLE TIME(
    IDTIME INT PRIMARY KEY AUTO_INCREMENT,
    TIME VARCHAR(30),
    ID_PESSOA VARCHAR(30)
);

/*FOREIGN KEY*/
ALTER TABLE TIME
ADD FOREIGN KEY(ID_PESSOA)
REFERENCES PESSOA(COLUNA1);

/*VERIFICAR AS CHAVES*/
SHOW CREATE TABLE TIME;

/*ORGANIZACAO DE CHAVES - CONSTRAINT (REGRA)*/
CREATE TABLE JOGADOR(
    IDJOGADOR INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30)
);

CREATE TABLE TIMES(
    IDTIME INT PRIMARY KEY AUTO_INCREMENT,
    NOMETIME VARCHAR(30),
    ID_JOGADOR INT,
    FOREIGN KEY(ID_JOGADOR)
    REFERENCES JOGADOR(IDJOGADOR)
);

INSERT INTO JOGADOR VALUES(NULL,'GUERRERO');
INSERT INTO TIMES VALUES(NULL,'FLAMENGO',1);

SHOW CREATE TABLE JOGADOR;
SHOW CREATE TABLE TIMES;

/*ORGANIZANDO CHAVES E ACOES DE CONSTRAINTS*/
CREATE TABLE CLIENTE(
    IDCLIENTE INT,
    NOME VARCHAR(30) NOT NULL
);

CREATE TABLE TELEFONE(
    IDTELEFONE INT,
    TIPO CHAR(3) NOT NULL,
    NUMERO VARCHAR(10) NOT NULL,
    ID_CLIENTE INT
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

/*DICIONARIO DE DADOS*/
SHOW DATABASES;

USE INFORMATION_SCHEMA;

STATUS

SHOW TABLES;

DESC TABLE_CONSTRAINTS;

SELECT CONSTRAINT_SCHEMA AS "BANCO",
TABLE_NAME AS "TABELA",
CONSTRAINT_NAME AS "NOME REGRA",
CONSTRAINT_TYPE AS "TIPO"
FROM TABLE_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = 'COMERCIO';

/*APAGANDO CONSTRAINTS*/
ALTER TABLE TELEFONE
DROP FOREIGN KEY FK_CLIENTE_TELEFONE;

/*ACOES DE CONSTRAINTS*/

/*ESTRUTURA DE UMA TRIGGER*/
CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH ROW (PARA CADA LINHA)
BEGIN -> INICIO

    QUALQUER COMANDO SQL
    
END -> FIM

CREATE DATABASE AULA40;

USE AULA40;

CREATE TABLE USUARIO(
    IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    LOGIN VARCHAR(30),
    SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
    IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
    IDUSUARIO INT,
    NOME VARCHAR(30),
    LOGIN VARCHAR(30)
);

/*CRIANDO A TRIGGER*/
DELIMITER $

CREATE TRIGGER BACKUP_USER
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN

    INSERT INTO BKP_USUARIO VALUES(NULL,OLD.IDUSUARIO,OLD.NOME,OLD.LOGIN);
    
END
$

INSERT INTO USUARIO VALUES(NULL,'ANDRADE','ANDRADE2009','HEXACAMPEAO');

/*COMUNICACAO ENTRE BANCOS*/
CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
    IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    VALOR FLOAT(10,2)
);

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO(
    IDBKP INT PRIMARY KEY AUTO_INCREMENT,
    IDPRODUTO INT,
    NOME VARCHAR(30),
    VALOR FLOAT(10,2)
);

INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,1000,'TESTE',0.0);

CREATE TRIGGER BACKUP_PRODUTO
BEFORE INSERT ON PRODUTO
FOR EACH ROW
BEGIN

    INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR);

END
$

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL SERVER',100.00);

CREATE TRIGGER BACKUP_PRODUTO_DELETE
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN

    INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR);

END
$

DELETE FROM PRODUTO WHERE IDPRODUTO = 2;

DROP TRIGGER BACKUP_PRODUTO;

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTO
FOR EACH ROW
BEGIN

    INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR,'I');

END
$

INSERT INTO PRODUTO VALUES(NULL,'LIVRO C#',100.00);

ALTER TABLE BACKUP.BKP_PRODUTO
ADD EVENTO CHAR(1);

DROP TRIGGER BACKUP_PRODUTO_DELETE;

CREATE TRIGGER BACKUP_PRODUTO_DELETE
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN

    INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,'D');

END
$

DELETE FROM PRODUTO WHERE IDPRODUTO = 4;

INSERT INTO PRODUTO VALUES(NULL,'LIVRO PHP',200.00);

/*TRIGGER DE AUDITORIA*/
CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
    IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    VALOR FLOAT(10,2)
);

/*QUANDO*/
SELECT NOW();

/*QUEM*/
SELECT CURRENT_USER();

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO(
    IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
    IDPRODUTO INT,
    NOME VARCHAR(30),
    VALOR_ORIGINAL FLOAT(10,2),
    VALOR_ALTERADO FLOAT(10,2),
    DATA DATETIME,
    USUARIO VARCHAR(30),
    EVENTO CHAR(1)
);

CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN

    INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,NEW.VALOR,NOW(),CURRENT_USER(),'U');

END
$

UPDATE PRODUTO SET VALOR = 110.00
WHERE IDPRODUTO = 4;

/*AUTORELACIONAMENTO*/
CREATE TABLE CURSOS(
    IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    HORAS INT,
    VALOR FLOAT(10,2),
    ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES(NULL,'BD RELACIONAL',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'BUSINESS INTELLIGENCE',40,800.00,1);
INSERT INTO CURSOS VALUES(NULL,'RELATORIOS AVANCADOS',20,600.00,2);
INSERT INTO CURSOS VALUES(NULL,'LOGICA PROGRAM',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'RUBY',30,500.00,4);

/*NOME, VALOR, HORAS E O NOME DO PRE REQUISITO DO CURSO*/
SELECT C.NOME AS CURSO, C.VALOR AS VALOR, C.HORAS AS CARGA, IFNULL(P.NOME, "----") AS PREREQ
FROM CURSOS C LEFT JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ;

/*CURSORES*/
CREATE DATABASE CURSORES;

USE CURSORES;

CREATE TABLE VENDEDORES(
    IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(50),
    JAN INT,
    FEV INT,
    MAR INT
);

INSERT INTO VENDEDORES VALUES (NULL,'MAFRA',213123,9879,3434);
INSERT INTO VENDEDORES VALUES (NULL,'CLARA',346346,64564,5446);
INSERT INTO VENDEDORES VALUES (NULL,'JOAO',234234,432432,6454);
INSERT INTO VENDEDORES VALUES (NULL,'LILIAN',87768,808078,34535);
INSERT INTO VENDEDORES VALUES (NULL,'ANTONIO',63454,6634,765856);
INSERT INTO VENDEDORES VALUES (NULL,'GLORIA',4634634,67876,35235);

SELECT NOME, (JAN+FEV+MAR) AS TOTAL FROM VENDEDORES;
SELECT NOME, (JAN+FEV+MAR) AS TOTAL, (JAN+FEV+MAR)/3 AS MEDIA FROM VENDEDORES;

CREATE TABLE VEND_TOTAL(
    NOME VARCHAR(50),
    JAN INT,
    FEV INT,
    MAR INT,
    TOTAL INT,
    MEDIA INT
);

CREATE PROCEDURE INSEREDADOS()
BEGIN

    DECLARE FIM INT DEFAULT 0;
    DECLARE VAR1, VAR2, VAR3, VTOTAL, VMEDIA INT;
    DECLARE VNOME VARCHAR(50);
    
    DECLARE REG CURSOR FOR(
        SELECT NOME, JAN, FEV, MAR FROM VENDEDORES
    );
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;
    
    OPEN REG;
    
    REPEAT
    
        FETCH REG INTO VNOME, VAR1, VAR2, VAR3;
        IF NOT FIM THEN
            
            SET VTOTAL = VAR1 + VAR2 + VAR3;
            SET VMEDIA = VTOTAL / 3;
            
            INSERT INTO VEND_TOTAL VALUES(VNOME,VAR1,VAR2,VAR3,VTOTAL,VMEDIA);
        
        END IF;
        
    UNTIL FIM END REPEAT;
    
    CLOSE REG;

END
$

CALL INSEREDADOS();

/*SEGUNDA E TERCEIRAS FORMAS NORMAIS*/
/*
    PRIMEIRA FORMA NORMAL
    
    ATOMICIDADE - UM CAMPO NAO PODE SER DIVISIVEL
    UM CAMPO NAO PODE SER VETORIZADO
    PK CHAVE PRIMARIA
*/
CREATE DATABASE CONSULTORIO;

USE CONSULTORIO;

CREATE TABLE PACIENTE(
    IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    SEXHO CHAR(1),
    EMAIL VARCHAR(30),
    NASCOMENTO DATE
);

CREATE TABLE MEDICO(
    IDMEDICO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    SEXO CHAR(1),
    ESPECIALIDADE VARCHAR(30),
    FUNCIONARIO ENUM('S','N')
);

CREATE TABLE HOSPITAL(
    IDHOSPITAL INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    BAIRRO VARCHAR(30),
    CIDADE VARCHAR(30),
    ESTADO CHAR(2)
);

CREATE TABLE CONSULTA(
    IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
    ID_PACIENTE INT,
    ID_MEDICO INT,
    ID_HOSPITAL INT,
    DATA DATETIME,
    DIAGNOSTICO VARCHAR(30)
);

CREATE TABLE INTERNACAO(
    IDINTERNACAO INT PRIMARY KEY AUTO_INCREMENT,
    ENTRADA DATETIME,
    QUARTO INT,
    SAIDA DATETIME,
    OBSERVACOES VARCHAR(50),
    ID_CONSULTA INT UNIQUE
);

/*CRIANDO AS CONSTRAINTS - CORREÇÃO COD do OBJ (PK, FK) _ TABELA PERTENCENTE _ TABELA DE ONDE VEM*/
ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_PACIENTE
FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTE(IDPACIENTE);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_MEDICO
FOREIGN KEY(ID_MEDICO) REFERENCES MEDICO(IDMEDICO);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_HOSPITAL
FOREIGN KEY(ID_HOSPITAL) REFERENCES HOSPITAL(IDHOSPITAL);

ALTER TABLE INTERNACAO ADD CONSTRAINT FK_INTERNACAO_CONSULTA
FOREIGN KEY(ID_CONSULTA) REFERENCES CONSULTA(IDCONSULTA);


    











